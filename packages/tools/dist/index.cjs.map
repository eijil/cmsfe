{"version":3,"sources":["../src/index.ts","../src/report/index.ts","../src/env.ts","../src/webview/index.ts"],"sourcesContent":["\n\nexport { default as ReportSDK } from './report'\nexport { default as webview } from './webview'\n","\n'use client'\nimport { nanoid } from 'nanoid'\n\nimport pako from 'pako'\nimport { getEnv } from '../env'\nimport { Buffer } from 'buffer'\nimport { IParams, IReportParam, IEventReportParam } from './interface'\n\n\nconst env = getEnv()\n\n/** 记录上报过的id */\nlet reported: any = {}\n\nclass ReportSDK {\n  private VERSION: string\n  private APP_ID: string\n  private CHANNEL_ID: string\n  private PACKAGE_NAME: string\n  private REPORT_API: string\n\n  private static instance: ReportSDK\n\n  private constructor(params: IParams) {\n    this.REPORT_API = params.reportAPI\n    this.VERSION = params.version\n    this.APP_ID = params.appId\n    this.CHANNEL_ID = params.channelId\n    this.PACKAGE_NAME = params.packageName || 'h5'\n  }\n\n  public static getInstance(params: IParams): ReportSDK {\n\n   \n\n    if (!ReportSDK.instance) {\n      ReportSDK.instance = new ReportSDK(params)\n    }\n    return ReportSDK.instance\n  }\n\n  /**\n   * 通用上报\n   * @param param\n   */\n  public eventReport(\n    { event_name, sub_event_name, properties, ctime }: IEventReportParam,\n    key?: string\n  ): void {\n    if (key && reported[key]) {\n      return\n    }\n    const data = {\n      _event_name: event_name,\n      _sub_event_name: sub_event_name,\n      properties,\n    }\n    try {\n      this.reportHandle(data, ctime)\n    } catch (e) {\n      console.log('上报失败', e)\n    }\n    if (key) {\n      reported[key] = true\n    }\n  }\n\n  /**\n   * 加载页面上报\n   * @param {string} pageName 当前路由名\n   * @param {string} prePageName 前路由名\n   * @param {string} url 页面路径\n   * @param {string} _scene_name 场景\n   */\n  public pageEnter(params: {\n    _page_name: string\n    _pre_page_name: string\n    _url: string\n    project_id?: number\n    project_info?: any\n  }) {\n    this.reportHandle({\n      _event_name: 'm_page_enter',\n      properties: {\n        ...params,\n        _referrer_url: document?.referrer,\n      },\n    })\n  }\n\n  /**\n   * 应用安装激活\n   */\n  public installReport() {\n    const { uaParser } = env\n\n    let category = ''\n    if (env.isMobile) {\n      category = 'phone'\n    } else if (env.isTablet) {\n      category = 'tablet'\n    } else if (env.isMac) {\n      category = 'mac'\n    } else {\n      category = 'pc'\n    }\n\n    if (!localStorage.getItem('_app_install_id')) {\n      this.reportHandle({\n        _event_name: 'm_app_install',\n        properties: {\n          _device_brand: '', // 拿不到就是空\n          _device_model: '', // 拿不到就是空\n          _device_screen_h: window.screen.height,\n          _device_screen_w: window.screen.width,\n          _device_ram: 0, // 拿不到就是空\n          _device_lang: 'en',\n          _device_category: category, //设备类型 phone/tablet/pc/mac/\n          browser_brand: uaParser.browser.name,\n          browser_version: uaParser.browser.version,\n          _ua: navigator.userAgent,\n          _url: window.location.href,\n          _referrer_url: document?.referrer,\n        },\n      })\n    }\n  }\n\n  private getBaseInfo() {\n    const { uaParser } = env\n    const _os_type = uaParser.os.name ? uaParser.os.name.toLowerCase() : ''\n\n    const baseInfo = {\n      _app_id: this.APP_ID,\n      _app_channel_id: this.CHANNEL_ID,\n      _app_version: this.VERSION,\n      _package_name: this.PACKAGE_NAME,\n      _app_game_version: '', // 传空\n      _app_res_version: '', // 传空\n      _app_install_id: localStorage.getItem('_app_install_id') || '', // install_id\n      _app_activate_id: sessionStorage.getItem('_app_activate_id') || '', // 3.5 run_id\n      _device_id: '', // 传空\n      _ad_id: '', // 传空\n      _androidid: '', // 传空\n      _idfv: '', // 传空\n      _os_type, // 获取平台id\n      _os_version: '', // 有就报，没有就报空\n      _os_timezone_offset: `utc_offset=-8:00`,\n      _os_timestamp: Math.floor(new Date().getTime() / 1000), // 3.5 ctime\n      _device_network_type: 0,\n      _app_user_id: localStorage.getItem('uid') || '', // uuid\n      // @ts-ignore\n      _app_lang: navigator?.language || navigator?.userLanguage || '', // 浏览器语言\n      _event_name: '', // 之前的eid,A列的事件名称\n      _sub_event_name: '', // 子事件名称， 默认传空字符串\n      properties: {},\n    }\n    const h = new Date().getTimezoneOffset() / 60\n    const m = (new Date().getTimezoneOffset() % 60).toString().padStart(2, '0')\n    /** 时区 */\n    baseInfo._os_timezone_offset = `utc_offset=${h}:${m}`\n\n    /** 首次进入生成id */\n    if (!localStorage.getItem('_app_install_id')) {\n      const _app_install_id = nanoid()\n      baseInfo._app_install_id = _app_install_id\n      localStorage.setItem('_app_install_id', _app_install_id.toString())\n    }\n    /** 每次打开会话生成id */\n    if (!sessionStorage.getItem('_app_activate_id')) {\n      const _app_activate_id = nanoid()\n      baseInfo._app_activate_id = _app_activate_id\n      sessionStorage.setItem('_app_activate_id', _app_activate_id.toString())\n    }\n\n    return baseInfo\n  }\n\n  private reportHandle(params: IReportParam, ctime?: number) {\n    const reportInfo = this.getBaseInfo()\n    if (ctime) reportInfo._os_timestamp = ctime\n    const data = {\n      ...reportInfo,\n      ...params,\n    }\n    this.send(data)\n  }\n\n  /**\n   * 发送数据到服务端\n   */\n  private async send(data: any) {\n    console.log('上报信息', data)\n\n    const d = pako.deflate(JSON.stringify([data]))\n    const buffer = Buffer.from(d)\n    const result = await fetch(this.REPORT_API, {\n      method: 'POST',\n      body: buffer.toString('base64'),\n    }).catch((err) => {\n      console.log('上报失败', err)\n    })\n\n    return result\n  }\n}\n\nexport default ReportSDK\n","'use strict'\n\nimport { UAParser } from 'ua-parser-js'\n\n// 导出获取环境函数\nexport const getEnv = (userAgent?: string) => {\n  // 获取userAgent\n  userAgent = userAgent\n    ? userAgent\n    : typeof window !== 'undefined'\n      ? window.navigator.userAgent\n      : ''\n  // 创建UAParser\n  const uaParser = UAParser(userAgent)\n\n  const { device, ua, os } = uaParser\n  // 返回环境信息\n  return {\n    uaParser,\n    isMobile: device.type === 'mobile',\n    isFB: isFB(ua),\n    isAndroid: os.name === 'Android',\n    isIOS: os.name === 'iOS',\n    isTablet: device.type === 'tablet',\n    isMac: os.name === 'Mac OS',\n    isApp: location.search.includes('rsApp'),\n    \n  }\n}\n\n/*\n * 判断是否是FB\n */\nexport const isFB = (ua: string) => {\n  // 判断ua中是否包含FB相关字符串\n  return /FBAN|FBAV|FB_IAB|FB_IABV_SIMULATOR/.test(ua)\n}\n","'use client'\n\nimport { Action, CallBack, CallBackResult, NavtiveCallParam } from './type'\n\nconst CALL_NATIVE = 'webToNative'\nconst NATIVE_CALLBACK = 'nativeToWeb'\n\nclass WebView {\n  // 回调函数存储池\n  private nativeCallbacks: Map<string, CallBack<any>> = new Map()\n\n  public constructor() {\n    if (typeof window === 'undefined') {\n      return\n    }\n    // 注册回调函数\n    this.registerCallback()\n  }\n\n  private registerCallback(): void {\n    window[NATIVE_CALLBACK] = (res: CallBackResult<any>) => {\n      try {\n        if (typeof res === 'string') {\n          res = JSON.parse(res)\n        }\n        const { id, name } = res\n        this.nativeCallbacks.get(`${id}_${name}`)?.(res)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n  }\n\n  /** 执行  */\n  public exec<T extends Action>(action: T, params?: NavtiveCallParam<T>) {\n    const { callback, ...other } = params || {}\n\n    const id = Date.now().toString()\n\n    const _parma = {\n      id,\n      name: action,\n      params: other,\n    }\n\n    try {\n      this.postMessage(_parma)\n    } catch (e) {\n      console.log(e)\n    }\n\n    if (callback) {\n      this.nativeCallbacks.set(`${id}_${action}`, callback)\n    }\n    return _parma\n  }\n\n  /** 调用接口 */\n  private postMessage = (message: any) => {\n    if (window.webkit) {\n      // ios处理\n      const param = {\n        ...message,\n        params: message.params,\n      }\n      this.iosMessage(param)\n    } else if (window?.Android) {\n      // 安卓\n      this.androidMessage(JSON.stringify(message))\n    }\n  }\n\n  /** IOS通信 */\n  private iosMessage = (param: any) => {\n    const native = window.webkit?.messageHandlers[CALL_NATIVE]\n    // 由于ISO不会抛出错误需要手动抛出\n    if (!native) {\n      throw new Error('版本过低')\n    }\n\n    native.postMessage(param)\n  }\n\n  /** android通信 */\n  private androidMessage = (param: any) => {\n    window?.Android[CALL_NATIVE](param)\n  }\n}\n\nexport default new WebView()\n"],"mappings":"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","names":["src_exports","__export","report_default","webview_default","__toCommonJS","import_nanoid","import_pako","import_ua_parser_js","getEnv","userAgent","uaParser","device","ua","os","isFB","import_buffer","env","getEnv","reported","ReportSDK","_ReportSDK","params","event_name","sub_event_name","properties","ctime","key","data","e","uaParser","category","_os_type","baseInfo","h","m","_app_install_id","_app_activate_id","reportInfo","d","pako","buffer","err","report_default","CALL_NATIVE","NATIVE_CALLBACK","WebView","res","_a","id","name","e","action","params","callback","other","_parma","message","param","native","webview_default"]}