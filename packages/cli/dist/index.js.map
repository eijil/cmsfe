{"version":3,"sources":["../src/commands/deploy.ts","../src/utils/logger.ts","../src/index.ts","../package.json"],"sourcesContent":["import enquirer from 'enquirer'\n\nimport chalk from 'chalk'\nimport { Command } from 'commander'\nimport path from 'path'\nimport ora from 'ora'\nimport * as fs from 'node:fs'\nimport { execSync } from 'child_process'\nimport { logger } from '../utils/logger'\n\nconst spinner = ora({\n  text: 'Loading...',\n  color: 'yellow',\n})\n\n\n\nconst cwd = process.cwd()\n\nconst configPath = path.join(cwd, '.cmsfe_config.json')\n\ntype Env = 'test' | 'prod'\n\nexport const deploy = new Command()\n  .name('deploy')\n  .command('deploy')\n  .alias('d')\n  .description('command [deploy | d] to deploy your project')\n  .action(async () => {\n    await run()\n  })\n\nasync function initCheck() {\n  // 检查是否存在dist文件夹\n  if (!fs.existsSync(path.join(cwd, 'dist'))) {\n    logger.error('未找到dist文件夹，请先执行build命令')\n    process.exit(1)\n  }\n  // 检查是否存在配置文件\n  if (!fs.existsSync(configPath)) {\n    logger.error('未找到ocmsfeconfig.json文件，请先创建')\n    process.exit(1)\n  }\n}\n\nfunction initOssUtilConfig(env: Env) {\n  try {\n    const data = fs.readFileSync(configPath, 'utf8')\n    const config = JSON.parse(data)\n    const ossConfig = config.oss[env]\n    execSync(\n      `ossutil config -e ${ossConfig.endpoint} -i ${ossConfig.accessKeyID} -k ${ossConfig.accessKeySecret}`,\n      { stdio: 'inherit' }\n    )\n  } catch (error) {\n    console.error(error)\n    process.exit(1)\n  }\n}\n\nexport async function run() {\n  // 检查是否存在dist文件夹\n  await initCheck()\n\n  const { prompt } = enquirer\n\n  //提示输入项目名称，必填\n  const projectPrompt: any = await prompt({\n    type: 'input',\n    name: 'name',\n    message: '请输入项目名称',\n    required: true,\n  })\n\n  // 选择部署环境\n  const envPrompt: any = await prompt({\n    type: 'select',\n    name: 'env',\n    message: '请选择部署环境',\n    choices: ['test', 'prod'],\n    required: true,\n  })\n\n  const { env } = envPrompt\n\n  const confirmResult: any = await prompt({\n    type: 'confirm',\n    name: 'confirm',\n    message: `确认发布这个项目 ${chalk.blue(envPrompt.env)}:${chalk.green(projectPrompt.name)} ？`,\n  })\n\n  if (!confirmResult?.confirm) {\n    logger.warn('部署已取消')\n    return\n  }\n\n  initOssUtilConfig(env)\n  const distPath = path.join(cwd, 'dist/')\n\n  try {\n    execSync(\n      `ossutil cp -r ${distPath}  oss://v-out-dev/images/${projectPrompt.name}/`,\n      { stdio: 'inherit' }\n    )\n  } catch (error) {\n    console.error(error)\n    process.exit(1)\n  }\n\n  spinner.succeed(`发布成功\n  http://v-out-dev.oss-ap-southeast-1.aliyuncs.com/images/${projectPrompt.name}`)\n}\n","import chalk from \"chalk\";\n\n/**\n * Custom logger\n */\nexport const logger = {\n  log: (msg: string) => console.log(msg),\n  info: (msg: string) => console.log(chalk.blue(msg)),\n  success: (msg: string) => console.log(chalk.green(msg)),\n  warn: (msg: string) => console.log(chalk.yellow(msg)),\n  error: (msg: string) => console.log(chalk.red(msg)),\n} as const;\n","#!/usr/bin/env node\nimport { deploy } from './commands'\nimport { Command } from 'commander'\n\nimport { version } from '../package.json'\n\nfunction main() {\n  const program = new Command()\n    .name('cmsfe')\n    .description('cmsfe cli')\n    .version(version || '0.0.0')\n  program.addCommand(deploy)\n  program.parse()\n}\n\nmain()\n","{\n  \"name\": \"@cmsfe/cli\",\n  \"version\": \"1.0.2\",\n  \"description\": \"CLI tool\",\n  \"license\": \"MIT\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"type\": \"module\",\n  \"main\": \"./dist/index.js\",\n  \"bin\": {\n    \"cmsfe\": \"./dist/index.js\"\n  },\n  \"types\": \"./dist/index.d.ts\",\n  \"files\": [\n    \"dist\"\n  ],\n  \"scripts\": {\n    \"dev\": \"tsup --watch\",\n    \"build\": \"tsup\",\n    \"start\": \"node ./dist/index.js\",\n    \"typecheck\": \"tsc --noEmit\",\n    \"test\": \"vitest\",\n    \"lint\": \"eslint --ext .ts\",\n    \"format:write\": \"prettier --write .\",\n    \"format:check\": \"prettier --check .\",\n    \"release\": \"changeset version\",\n    \"pub:release\": \"pnpm build && pnpm publish --no-git-checks --access public\",\n    \"pub:beta\": \"pnpm build && pnpm publish --no-git-checks --access public --tag beta\"\n  },\n  \"devDependencies\": {\n    \"@cmsfe/eslint-config\": \"workspace:*\",\n    \"@cmsfe/typescript-config\": \"workspace:*\",\n    \"@types/fs-extra\": \"^11.0.4\",\n    \"@types/node\": \"^20.10.6\",\n    \"tsup\": \"^8.0.1\",\n    \"type-fest\": \"^4.10.1\",\n    \"typescript\": \"^5.3.3\",\n    \"vitest\": \"^1.2.1\"\n  },\n  \"dependencies\": {\n    \"chalk\": \"^5.3.0\",\n    \"commander\": \"^11.1.0\",\n    \"enquirer\": \"^2.4.1\",\n    \"fs-extra\": \"^11.2.0\",\n    \"ora\": \"^8.0.1\",\n    \"prompts\": \"^2.4.2\"\n  }\n}\n"],"mappings":";AAAA,OAAOA,MAAc,WAErB,OAAOC,MAAW,QAClB,OAAS,WAAAC,MAAe,YACxB,OAAOC,MAAU,OACjB,OAAOC,MAAS,MAChB,UAAYC,MAAQ,UACpB,OAAS,YAAAC,MAAgB,gBCPzB,OAAOC,MAAW,QAKX,IAAMC,EAAS,CACpB,IAAMC,GAAgB,QAAQ,IAAIA,CAAG,EACrC,KAAOA,GAAgB,QAAQ,IAAIF,EAAM,KAAKE,CAAG,CAAC,EAClD,QAAUA,GAAgB,QAAQ,IAAIF,EAAM,MAAME,CAAG,CAAC,EACtD,KAAOA,GAAgB,QAAQ,IAAIF,EAAM,OAAOE,CAAG,CAAC,EACpD,MAAQA,GAAgB,QAAQ,IAAIF,EAAM,IAAIE,CAAG,CAAC,CACpD,EDDA,IAAMC,EAAUC,EAAI,CAClB,KAAM,aACN,MAAO,QACT,CAAC,EAIKC,EAAM,QAAQ,IAAI,EAElBC,EAAaC,EAAK,KAAKF,EAAK,oBAAoB,EAIzCG,EAAS,IAAIC,EAAQ,EAC/B,KAAK,QAAQ,EACb,QAAQ,QAAQ,EAChB,MAAM,GAAG,EACT,YAAY,6CAA6C,EACzD,OAAO,SAAY,CAClB,MAAMC,EAAI,CACZ,CAAC,EAEH,eAAeC,GAAY,CAEjB,aAAWJ,EAAK,KAAKF,EAAK,MAAM,CAAC,IACvCO,EAAO,MAAM,yFAAwB,EACrC,QAAQ,KAAK,CAAC,GAGR,aAAWN,CAAU,IAC3BM,EAAO,MAAM,+EAA6B,EAC1C,QAAQ,KAAK,CAAC,EAElB,CAEA,SAASC,EAAkBC,EAAU,CACnC,GAAI,CACF,IAAMC,EAAU,eAAaT,EAAY,MAAM,EAEzCU,EADS,KAAK,MAAMD,CAAI,EACL,IAAID,CAAG,EAChCG,EACE,qBAAqBD,EAAU,QAAQ,OAAOA,EAAU,WAAW,OAAOA,EAAU,eAAe,GACnG,CAAE,MAAO,SAAU,CACrB,CACF,OAASE,EAAO,CACd,QAAQ,MAAMA,CAAK,EACnB,QAAQ,KAAK,CAAC,CAChB,CACF,CAEA,eAAsBR,GAAM,CAE1B,MAAMC,EAAU,EAEhB,GAAM,CAAE,OAAAQ,CAAO,EAAIC,EAGbC,EAAqB,MAAMF,EAAO,CACtC,KAAM,QACN,KAAM,OACN,QAAS,6CACT,SAAU,EACZ,CAAC,EAGKG,EAAiB,MAAMH,EAAO,CAClC,KAAM,SACN,KAAM,MACN,QAAS,6CACT,QAAS,CAAC,OAAQ,MAAM,EACxB,SAAU,EACZ,CAAC,EAEK,CAAE,IAAAL,CAAI,EAAIQ,EAEVC,EAAqB,MAAMJ,EAAO,CACtC,KAAM,UACN,KAAM,UACN,QAAS,oDAAYK,EAAM,KAAKF,EAAU,GAAG,CAAC,IAAIE,EAAM,MAAMH,EAAc,IAAI,CAAC,SACnF,CAAC,EAED,GAAI,EAACE,GAAA,MAAAA,EAAe,SAAS,CAC3BX,EAAO,KAAK,gCAAO,EACnB,MACF,CAEAC,EAAkBC,CAAG,EACrB,IAAMW,EAAWlB,EAAK,KAAKF,EAAK,OAAO,EAEvC,GAAI,CACFY,EACE,iBAAiBQ,CAAQ,4BAA4BJ,EAAc,IAAI,IACvE,CAAE,MAAO,SAAU,CACrB,CACF,OAASH,EAAO,CACd,QAAQ,MAAMA,CAAK,EACnB,QAAQ,KAAK,CAAC,CAChB,CAEAf,EAAQ,QAAQ;AAAA,4DAC0CkB,EAAc,IAAI,EAAE,CAChF,CE7GA,OAAS,WAAAK,MAAe,YCAtB,IAAAC,EAAW,QDIb,SAASC,GAAO,CACd,IAAMC,EAAU,IAAIC,EAAQ,EACzB,KAAK,OAAO,EACZ,YAAY,WAAW,EACvB,QAAQC,GAAW,OAAO,EAC7BF,EAAQ,WAAWG,CAAM,EACzBH,EAAQ,MAAM,CAChB,CAEAD,EAAK","names":["enquirer","chalk","Command","path","ora","fs","execSync","chalk","logger","msg","spinner","ora","cwd","configPath","path","deploy","Command","run","initCheck","logger","initOssUtilConfig","env","data","ossConfig","execSync","error","prompt","enquirer","projectPrompt","envPrompt","confirmResult","chalk","distPath","Command","version","main","program","Command","version","deploy"]}